import * as fs from 'fs'
import { parseLex } from './ParseLex'

let file = fs.readFileSync('./exampleLex.l').toString()
let [preDeclare, schema, actions, postDeclare] = parseLex(file)
let content: string[] = []
content.push(
`
/*
* This file is generated by SEULex,
* ANY DIRECT MODIFY TO THE FILE WILL BE LOST AFTER RECOMPILE!
*/
const { NFA } = require('./seu-lex-yacc/NFA')
const { DFA } = require('./seu-lex-yacc/DFA')
let yytext = ''
`
)
let actionFunctions: any = {}
content.push(...preDeclare)
actions.forEach((value, key) => {
  console.log(value, key)
  actionFunctions[key] = 
`() => { ${value} }`
})
content.push(
`
let __dfaTransferTable = JSON.parse('${JSON.stringify(schema)}')
let __dfa = DFA.deserializeFromSchema(__dfaTransferTable)
let __actionFunctions = ${JSON.stringify(actionFunctions)}
Object.keys(__actionFunctions).forEach(key => __actionFunctions[key] = eval(__actionFunctions[key]))

let main = content => {
  let pos = 0
  while (pos < content.length) {
    yytext = ''
    while (__dfa.transfer(content[pos])) {
      yytext += content[pos]
      pos++
    }
    console.log(yytext, __dfa.getCurrentAction())
    eval(__actionFunctions[__dfa.getCurrentAction()])()
    __dfa.reset()
  }
}

module.exports = main
`
)
content.push(...postDeclare)
fs.writeFile('./build/out.js', content.join('\n'), err=>console.log(err))