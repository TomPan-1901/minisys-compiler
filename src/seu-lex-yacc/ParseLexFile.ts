import * as fs from 'fs'
import { parseLex } from './ParseLex'

if (process.argv.length < 4) {
  console.log('Usage: node ParseLexFile.js <input lex file> <output js file>')
  process.exit(0)
}
let lexFilePath = process.argv[2]
let outFilePath = process.argv[3]
let file = fs.readFileSync(lexFilePath).toString()
let [preDeclare, schema, actions, postDeclare] = parseLex(file)
let content: string[] = []
content.push(
`
/*
* This file is generated by SEULex,
* ANY DIRECT MODIFY TO THE FILE WILL BE LOST AFTER RECOMPILE!
*/
const { DFA } = require('./seu-lex-yacc/DFA')
const fs = require('fs')
let yytext = ''
let yylval = undefined
let buffer = Buffer.alloc(4096)
let bufferPtr = 0
let yyin = process.argv[2] ? fs.openSync(process.argv[2], 'r') : process.stdin.fd
let yyout = process.argv[3] ? fs.openSync(process.argv[3], 'w') : process.stdout.fd
let print = content => fs.writeSync(yyout, content, err => console.log(err))
let bufferLength = fs.readSync(yyin, buffer)

`
)
let actionFunctions: any = {}
content.push(...preDeclare)
actions.forEach((value, key) => {
  console.log(value, key)
  actionFunctions[key] = 
`() => { ${value} }`
})
content.push(
`
let __dfaTransferTable = ${JSON.stringify(schema)}
let __dfa = DFA.deserializeFromSchema(__dfaTransferTable)
let __actionFunctions = ${JSON.stringify(actionFunctions)}
Object.keys(__actionFunctions).forEach(key => __actionFunctions[key] = eval(__actionFunctions[key]))

let main = () => {
  while (true) {
    let token = yylex()
    if (token === null) {
      break
    }
  }
}

let yylex = () => {
  yytext = ''
  if (bufferPtr === bufferLength) {
    bufferPtr = 0
    bufferLength = fs.readSync(yyin, buffer)
  }
  while (bufferPtr < bufferLength) {
    while(bufferPtr < bufferLength && __dfa.transfer(String.fromCharCode(buffer.at(bufferPtr)))) {
      yytext += String.fromCharCode(buffer.at(bufferPtr))
      bufferPtr++
      if (bufferPtr === bufferLength) {
        bufferPtr = 0
        bufferLength = fs.readSync(yyin, buffer)
      }
    }
    if (__dfa.getCurrentAction() !== null) {
      let action = __dfa.getCurrentAction()
      __dfa.reset()
      return __actionFunctions[action]()
    }
    print(String.fromCharCode(buffer.at(bufferPtr)))
    yytext = ''
    __dfa.reset()
    bufferPtr++
    if (bufferPtr === bufferLength) {
      bufferPtr = 0
      bufferLength = fs.readSync(yyin, buffer)
    }
  }
  return null
}
if (require.main === module) {
  main()
}
let YYLVAL = () => yylval
let YYTEXT = () => yytext
exports.yylex = yylex
exports.YYLVAL = () => yylval
exports.YYTEXT = () => yytext
`
)
content.push(...postDeclare)
fs.writeFile(outFilePath, content.join('\n'), err=>console.log(err))